<?php
if ($chat_id != ADMIN_CHAT_ID) {
    $action = explode(" ", $user["action"]);
    if ($action[0] == "health_check" && isset($action[1])) {
        $user["action"] = "";
        R::store($user);

        $this->DelMessageText($user["chat_id"], $message_id);
        $this->DelMessageText($user["chat_id"], $action[2]);

        $status = 0;

        if ($action[1]) {
            $buttonDeepLink = "";
            switch ($action[1]) {
                case 0:
                    $status = 0;
                    $buttonDeepLink = "/message_18";
                    break;
                case 1:
                    $status = 1;
                    $buttonDeepLink = "/message_18 1";
                    break;
                case 2:
                    $status = 2;
                    $buttonDeepLink = "/message_19 1";
                    break;
                case 3:
                    $status = 3;
                    $buttonDeepLink = "/message_20 1";
                    break;
                case 4:
                    $status = 4;
            }

            if ($status == 4) {
                $templateUser = new Template("message_21");
                $templateUser = $templateUser->Load();
                $templateUser->LoadButtons();

                $this->sendMessage($user["chat_id"], $templateUser->text, $templateUser->buttons);
            } else {
                $templateUser = new Template("health_check_success", [
                    new TemplateData(":buttonDeepLink", $buttonDeepLink)
                ]);
                $templateUser = $templateUser->Load();
                $templateUser->LoadButtons();

                $this->sendMessage($user["chat_id"], $templateUser->text, $templateUser->buttons);
            }

        }
        //file_put_contents("UsersStatus.txt",$status);
        $task = "";
        switch ($status) {
            case 1:
                $task = "–ò –≤–æ—Ç —Ç—ã –∑–¥–µ—Å—å!‚ú®\n–ß–∞–π –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏.\n–¢–∞–∫ –∂–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ç–∞—Ä–µ–ª–∫—É –ø–∏—Ä–æ–∂–∫–æ—Ñ, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤—Å–µ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∂–µ–ª–µ–∑—ã –∏ –æ—Ä–≥–∞–Ω—ã, –≤ —Ç–≤–æ–µ–º —Ç–µ–ª–µ: ‚òï\n–Ø–∏—á–Ω–∏–∫–∏, –ø–æ—á–∫–∏, –Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–∏ –∏ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µüíÜ‚Äç‚ôÄ";
                break;
            case 2:
                $task = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—Ç–æ—Ä–∞—è –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞üö™\n–¢—ã –ø—Ä–∏—à–ª–∞ –∫ –ö—Ä–∞—Å–Ω–æ–π –∫–æ—Ä–æ–ª–µ–≤–µ –†–µ–≥–∏–Ω–µüë©\n–ö—Ä–æ–ª–∏–∫ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Ç—ã —Å –Ω–µ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—åüôè\n–û–Ω–∞ –¥–∞—Å—Ç —Ç–µ–±–µ —Ç–∞–π–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ—Ä–¥–µ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –æ—á–∏—â–µ–Ω–∏–µ –ª–µ–≥–∫–∏—Ö–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞.\n–°–∫–æ—Ä–µ–µ –±–µ—Ä–∏ —ç—Ç–æ—Ç –ø–∏—Ä–æ–∂–æ–∫, —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∫—É—Åüç∞";
                break;
            case 3:
                $task = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—éüéä\n–Ω—É –≤–æ—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–≤–µ—Ä—å –∑–∞ –Ω–µ–π —Ç–µ–±—è –∂–¥–µ—Ç –ë–µ–ª–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞üë©‚Äçü¶≥\n–û–Ω–∞ –≥–æ—Ç–æ–≤–∞ —É–≥–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è —Å–≤–æ–∏–º–∏ –ø–∏—Ä–æ–∂–Ω—ã–º–∏ —Å –≤–æ–ª—à–µ–±–Ω—ã–º —á–∞–µ–º –∫—Ä–æ–ª–∏–∫–∞  üí´!\n–ó–Ω–∞–µ—à—å, –∫ —á–µ–º—É —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç?!üòÉ\n–¢—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ —á–µ—Ä–µ–∑ –≤—ã—Å—à–∏–µ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–æ —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π‚ú®\n–ö—Ä–æ–ª–∏–∫ –∂–∞–∂–¥–µ—Ç —É–≥–æ—Å—Ç–∏—Ç—å —Ç–µ–±–µ —ç—Ç–∏–º–∏ –ø–∏—Ä–æ–∂–Ω—ã–º–∏  üçΩ";
                break;
            case 4:
                $task = "–î–∞-–¥–∞, –º–∏–ª–∞—è! –≠—Ç–æ –µ—â–µ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∞–µ–ø–∏—Ç–∏–µ. –ö—Ä–æ–ª–∏–∫  üê∞ —Å–æ–≤—Å–µ–º –Ω–µ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø—Ä–æ—â–∞—Ç—å—Å—è, –ø–æ—ç—Ç–æ–º—É –æ–Ω –ø—Ä–∏–ø—Ä—è—Ç–∞–ª –¥–ª—è —Ç–µ–±—è –µ—â–µ –æ–¥–∏–Ω –≤–∫—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ—á–µ–∫! –°—Ç—Ä–∞–∂–∞ –æ –Ω–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç ‚Äî —ç—Ç–æ —Å—é—Ä–ø—Ä–∏–∑ üíö";
                break;
        }
        $templateAdmin = new Template("admin/health_check", [
            new TemplateData(":status", $status),
            new TemplateData(":task", $task),
            new TemplateData(":username", $user["username"]),
            new TemplateData(":userText", $text),
            new TemplateData(":user_id", $user["id"]),
            new TemplateData(":userChatId", $user["chat_id"])
        ]);
        $templateAdmin = $templateAdmin->Load();
        $templateAdmin->LoadButtons();

        $this->sendMessage(ADMIN_CHAT_ID, $templateAdmin->text, $templateAdmin->buttons);
        if ($status == 4) {
            $usercron = R::dispense("userscron");
            $userscron["user_id"] = $user["id"];
            $userscron["timestamp_start"] = time();
            $userscron["wait_time"] = 43200;
            $userscron["message_type"] = 21;
            R::store($userscron);
        }
        return;
    }
    if ($command[0]) {
        switch ($command[0]) {
            case "/start": // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2
                if ($command[1]) {
                    if (preg_match("~^join[\d]+|ref[\d]+$~", $command[1], $matches)) {
                        $reference = preg_replace('/[^a-z]/', '', $matches[0]);

                        //file_put_contents("test1command.txt", $reference);
                        if ($reference == "ref") {
                            //file_put_contents("test2z.txt", "Zashel");

                            $un_text = substr($matches[0], 3);
                            $id_ref = $un_text;
                            //file_put_contents("test2.txt", $id_ref + "\n" + $chat_id);
                            if ($id_ref == $chat_id) {

                            } else {
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—ã–≤–∞–ª–∏—Å—å —É–∂–µ
                                $get_user_ref = R::findOne('referal', 'chat_id = :chat_id AND ref_id_user = :ref_id_user', [':chat_id' => $chat_id, ':ref_id_user' => $id_ref]);
                                if (!$get_user_ref) {


                                    $r_user = R::findOne('users', 'chat_id = :chat_id', [':chat_id' => $chat_id]);

                                    //file_put_contents("testbfrImin.txt", $r_user);
                                    # –ï—Å–ª–∏ –º—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                                    if ($r_user["ref"] == 0) {

                                    } else {
                                        //file_put_contents("testbfrImin12412.txt", $id_ref);
                                        $info_user = R::findOne('users', 'chat_id = :chat_id', [':chat_id' => $id_ref]);
                                        $info_user_nik = $info_user->username;
                                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è

                                        if (!$info_user) {
                                            //file_put_contents("testneinfo.txt", $r_user["ref"]);
                                        } else {
                                            //file_put_contents("testcrtTabkle.txt", $r_user);

                                            //—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
                                            $save = R::dispense('referal');
                                            $save->chat_id = $chat_id; // –∏–¥ –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
                                            $save->ref_id_user = $id_ref; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                                            $save->nik = $info_user_nik; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                                            $save->status = 0; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
                                            R::store($save);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //$this->delMessageText($user["chat_id"], $message_id);

                $user = R::findOne("users", "chat_id = $chat_id");
                if ($user) $temp_name = "message_2";
                else $temp_name = "start_message_not_registered";

                if ($user["chat_id"] != $chat_id) {
                    $user = R::dispense("users");
                    $user["chat_id"] = $chat_id;
                    $user["name"] = $first_name;
                    if ($username) {
                        //file_put_contents("testUsername.txt", "{$username}\n{$first_name}");
                        $user["username"] = $username;
                        $user["anonymous"] = false;
                    } else {
                        //file_put_contents("testNoUsername.txt", "{$username}\n{$first_name}");
                        //–ë–µ—Ä–µ–º –∏–º—è, —Ç–∞–∫ –∫–∞–∫ username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å
                        $user["username"] = "–ê–Ω–æ–Ω–∏–º";
                        $user["anonymous"] = true;
                    }
                    //–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ, —Ç–æ —Å—Ç–∞–≤–ª—é –µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    (count($command) < 2) ? $user["ref"] = 0 : $user["ref"] = $command[1];
                    $idstore = R::store($user);
                    //file_put_contents("testRBEAns.txt", "{$idstore}\n{$username}\n{$first_name}");
                }

                $template = new Template($temp_name);
                $template = $template->Load();
                $template->LoadButtons();
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/invite":
                $this->DelMessageText($user["chat_id"], $message_id);
                $template = new Template("message_27", [
                    new TemplateData(":chatId", $user["chat_id"]),
                ]);
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;

            case "/present":
                // –ø–æ–ª—É—á–∞—é —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞
                $present_type = (int)$command[1];

                // –µ—Å–ª–∏ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é
                if (!$present_type) return;

                // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                switch ($present_type) {
                    case 1:
                        $template = new Template("present_1", [
                            new TemplateData(":presentType", $present_type)
                        ]);
                        break;
                    case 2:
                        $template = new Template("present_2", [
                            new TemplateData(":presentType", $present_type)
                        ]);
                        break;
                    default: // –µ—Å–ª–∏ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é
                        return;
                }

                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $userscron = R::findOne("userscron", "user_id = {$user["id"]}");

                if (!$userscron) {
                    $userscron = R::dispense("userscron");
                    $userscron["user_id"] = $user["id"];
                    $userscron["timestamp_start"] = time();
                    $userscron["wait_time"] = 7200;
                    $userscron["message_type"] = 3;
                }

                R::store($userscron);

                $template = $template->Load();
                $template->LoadButtons();

                // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/message_3": // –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ 3 –∏–∑ –∫—Ä–æ–Ω—Ç–∞–±–∞
                $button_type = (int)$command[1];

                // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                $content = "";

                // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                $buttons = [];

                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω, —É–¥–∞–ª—è—é –µ–≥–æ –∏–∑ –∫—Ä–æ–Ω—Ç–∞–±–∞
                $userscron = R::findOne("userscron", "user_id = {$user["id"]}");
                R::trash("userscron", $userscron["id"]);

                // —Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                switch ($button_type) {
                    case 1: // –î–∞ /message_4
                        $preCommand = "/present 1";
                        $template = new Template("message_4");
                        $template = $template->Load();
                        $template->LoadButtons();
                        $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                        return;
                    case 2: // –ù–µ—Ç /message_5
                        $preCommand = "/present 1";
                        $template = new Template("message_5");
                        $template = $template->Load();
                        $template->LoadButtons();

                        $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                        return;
                    case 3: // –ù–µ —É—Å–ø–µ–ª–∞
                        $userscron = R::findOne("userscron", "user_id = {$user["id"]}");
                        if (!$userscron) {
                            $userscron = R::dispense("userscron");
                            $userscron["user_id"] = $user["id"];
                            $userscron["timestamp_start"] = time();
                            $userscron["wait_time"] = 7200;
                            $userscron["message_type"] = 3;
                        } else {
                            switch ((int)$userscron["wait_time"]) {
                                case 7200:
                                    $userscron["wait_time"] = 43200;
                                    break;
                                case 43200:
                                    $userscron["wait_time"] = 86400;
                                    break;
                                case 86400:
                                    break;
                            }
                            $userscron["timestamp_start"] = time();
                            $userscron["status"] = 0;
                            $userscron["message_type"] = 3;
                        }
//                    R::store($userscron);
                        if ((int)$userscron["wait_time"] == 86400) {
                            R::store($userscron);
                        } else {
                            R::trash("userscron", $userscron["id"]);
                        }

                        // –ø–æ–ª—É—á–∞—é —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞
                        $present_type = (int)$command[2];

                        // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        switch ($present_type) {
                            case 1:
                                $template = new Template("present_1", [
                                    new TemplateData(":presentType", $present_type)
                                ]);
                                break;
                            case 2:
                                $template = new Template("present_2", [
                                    new TemplateData(":presentType", $present_type)
                                ]);
                                break;
                            default: // –µ—Å–ª–∏ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é
                                return;
                        }

                        $template = $template->Load();
                        $template->LoadButtons();

                        $response = $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                        return;
                    case 4:
                        $preCommand = "/present " . $command[2];
                        $template = new Template("message_3", [
                            new TemplateData(":command", $command[2])
                        ]);
                        $template = $template->Load();
                        $template->LoadButtons();

                        $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                        return;
                }
                return;
            case "/message_4":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_4");
                $template = $template->Load();
                $template->LoadButtons();

                // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                $response = $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/message_6":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);
                $preCommand = "/message_4";
                $template = new Template("message_6", [
                    new TemplateData(":preCommand", $preCommand),
                ]);

                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;
            case "/message_6_1":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);
                $preCommand = "/message_4";
                $template = new Template("message_6_1", [
                    new TemplateData(":preCommand", $preCommand),
                ]);
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;
            case "/message_13":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $price = file_get_contents("modules/templates/admin/price.txt");
                $template = new Template("message_13", [
                    new TemplateData(":price", $price)
                ]);
                $template->Load();
                $template->LoadButtons();

//                $content = $this->loadTemplate("message_13");
//
//
//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–µ—Ç", "/message_8 $price"), // —Å–æ–æ–±—â–µ–Ω–∏–µ 8
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ï—Å—Ç—å", "/message_14"), // —Å–æ–æ–±—â–µ–Ω–∏–µ 14
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/message_6_1"),
//                    ],
//                ];

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;
            case "/extaz_reqvezit":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("extaz_reqvezit", [
                    new TemplateData(":price", $command[1]),
                ]);

                $template->Load();
                $template->LoadButtons();

//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "/payment_confirmation $command[1]"),
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/message_13"),
//                    ],
//                ];

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/payment_confirmation":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("payment_confirmation", [
                    new TemplateData(":price", $command[1]),
                ]);
                $template = $template->Load();
                $buttons = [
                    [
                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/message_8 $command[1]"),
                    ],
                ];

                $response = $this->sendMessage($user["chat_id"], $template->text);

                $user["action"] = "payment_confirmation {$response["result"]["message_id"]}";
                R::store($user);

                $order = R::dispense("orders");
                $order["user_id"] = $user["id"];
                R::store($order);

                return;
            case "/message_14":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $whatsup_number = file_get_contents("modules/templates/admin/whats_up_number.txt");
                $watsup_msg = "https://api.whatsapp.com/send?phone=$whatsup_number&text=" . $this->loadTemplate("message_15");

                $template = new Template("message_14");
                //$template = new Template("message_14",[
                //   new TemplateData(":whatsup", $watsup_msg)
                //]);
                $template->Load();
                $template->LoadButtons();

//                $content = $this->loadTemplate("message_14");
//
//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "", "https://api.whatsapp.com/send?phone=79627813466&text=" . $this->loadTemplate("message_15")), // —Å–æ–æ–±—â–µ–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∞—Ç—Å–∞–ø
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–°–∞–º–∞ —Ä–∞–∑–±–µ—Ä—É—Å—å", "/message_16"), // —Å–æ–æ–±—â–µ–Ω–∏–µ 16
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/message_13"),
//                    ],
//                ];

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;

            case "/message_7":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_16");
                $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;
            case "/message_16":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $whatsup_number = file_get_contents("modules/templates/admin/whats_up_number.txt");
                $watsup_msg = "https://api.whatsapp.com/send?phone=$whatsup_number&text=" . $this->loadTemplate("message_15");

                $template = new Template("message_7", [
                    new TemplateData(":whatsup", $watsup_msg)
                ]);
                $template->Load();
                $template->LoadButtons();
//                $content = $this->loadTemplate("message_7");
//
//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "", "https://api.whatsapp.com/send?phone=79627813466&text=" . $this->loadTemplate("message_15")), // —Å–æ–æ–±—â–µ–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∞—Ç—Å–∞–ø
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/message_14"),
//                    ],
//                ];

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                return;
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞
            case "/health_check":
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("health_check_message");
                $template = $template->Load();

                $response = $this->sendMessage($user["chat_id"], $template->text);

                $user["action"] = "health_check $command[1] {$response["result"]["message_id"]}";
                R::store($user);
                return;
            case "/message_17":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_17");
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/message_18":
                $order = R::findOne("orders", "user_id = {$user["id"]} ORDER BY id DESC");
                if ($command[1] == 1) {
                    if ($order["status"] != 2) {
                        $template = new Template("payment_confirmation_deny");
                        $template = $template->Load();
                        $template->LoadButtons();

                        $this->sendMessage($user["chat_id"], $template->text, $template->buttons ?: null);
                        return;
                    }
                    $template = new Template("message_18");
                    $template = $template->Load();
                    $template->LoadButtons();
                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                } else {
                    $template = new Template("health_check_message");
                    $template = $template->Load();

                    $response = $this->sendMessage($user["chat_id"], $template->text);
                    $user["action"] = "health_check 1 {$response["result"]["message_id"]}";
                    R::store($user);

                    $order["marathon_stage"] = 1;
                    R::store($order);
                }

                $this->DelMessageText($user["chat_id"], $message_id);

                return;
            case "/message_19":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);

                $order = R::findOne("orders", "user_id = {$user["id"]} ORDER BY id DESC");
                $preCommand = "/message_18";
                if ($order["status"] != 2) {
                    $template = new Template("payment_confirmation_deny", [
                        new TemplateData(":preCommand", $preCommand),
                    ]);
                    $template = $template->Load();

                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons ?: null);
                } elseif ($command[1]) {
                    $template = new Template("message_19", [
                        new TemplateData(":preCommand", $preCommand),
                    ]);
                    $template = $template->Load();
                    $template->LoadButtons();
                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                } else {

                    $template = new Template("health_check_message");
                    $template = $template->Load();

                    $response = $this->sendMessage($user["chat_id"], $template->text);
                    $user["action"] = "health_check 2 {$response["result"]["message_id"]}";
                    R::store($user);
//                    $template = new Template("health_check", [
//                        new TemplateData(":marathonStage", 2),
//                    ]);
//                    $template = $template->Load();
//                    $template->LoadButtons();
//                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                    $order["marathon_stage"] = 2;
                    R::store($order);
                }

                return;
            case "/message_20":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);
                $preCommand = "/message_19";
                $order = R::findOne("orders", "user_id = {$user["id"]} ORDER BY id DESC");

                if ($order["status"] != 2) {
                    $template = new Template("payment_confirmation_deny", [
                        new TemplateData(":preCommand", $preCommand),
                    ]);
                    $template = $template->Load();

                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons ?: null);
                } elseif ($command[1]) {
                    $template = new Template("message_20");
                    $template = $template->Load();
                    $template->LoadButtons();
                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                } else {

                    $template = new Template("health_check_message");
                    $template = $template->Load();

                    $response = $this->sendMessage($user["chat_id"], $template->text);
                    $user["action"] = "health_check 3 {$response["result"]["message_id"]}";
                    R::store($user);
//                    $template = new Template("health_check", [
//                        new TemplateData(":marathonStage", 3),
//                    ]);
//                    $template = $template->Load();
//                    $template->LoadButtons();
//                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                    $order["marathon_stage"] = 3;
                    R::store($order);
                }
                return;
            case "/message_21":
                // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $this->DelMessageText($user["chat_id"], $message_id);
                $preCommand = "/message_20";
                $order = R::findOne("orders", "user_id = {$user["id"]} ORDER BY id DESC");

                if ($order["status"] != 2) {
                    $template = new Template("payment_confirmation_deny", [
                        new TemplateData(":preCommand", $preCommand),
                    ]);
                    $template = $template->Load();

                    $this->sendMessage($user["chat_id"], $template->text, $template->buttons ?: null);
                } else {

                    $template = new Template("health_check_message");
                    $template = $template->Load();

                    $response = $this->sendMessage($user["chat_id"], $template->text);
                    $user["action"] = "health_check 4 {$response["result"]["message_id"]}";
                    R::store($user);
                    $order["marathon_stage"] = 4;
                    R::store($order);
                }
                return;
            case"/message_22":
                $this->DelMessageText($user["chat_id"], $message_id);
                $template = new Template("message_22");
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case"/utro_reqvezit":

                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("utro_reqvezit");
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case"/message_23_1":
                $preCommand = "/message_22";
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_23_1");
                $template = $template->Load();

                $response = $this->sendMessage($user["chat_id"], $template->text);

                $user["action"] = "message_23_1 {$response["result"]["message_id"]}";
                R::store($user);

                $aphroditeMorning = R::dispense("aphroditemorning");
                $aphroditeMorning["user_id"] = $user["id"];

                R::store($aphroditeMorning);
                return;
            case "/message_24":
                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_24");
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;

            case "/courses":

                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_28");
                $template = $template->Load();
                $template->LoadButtons();

//                $content = $this->loadTemplate("message_28");
//
//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–£—Ç—Ä–æ –ê—Ñ—Ä–æ–¥–∏—Ç—ã", "/message_22"),
//                        $this->buildInlineKeyBoardButton("–≠–∫—Å—Ç–∞–∑ –ê—Ñ—Ä–æ–¥–∏—Ç—ã", "/message_6_1"),
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "/message_26"),
//                        $this->buildInlineKeyBoardButton("–î–∞–æ—Å—Å–∫–∞—è –º–∞–≥–∏—è", "/message_25"),
//
//                        //$this->buildInlineKeyBoardButton("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ 1491—Ä.", "", "https://wa.me/+79627813466?text=" . $this->loadTemplate("message_15")),
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/start")
//                    ],
//                ];
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons, 3);
                return;

            case "/message_25":#–î–∞–æ—Å—Å–∫–∞—è –º–∞–≥–∏—è
                $preCommand = "/courses";
                $this->DelMessageText($user["chat_id"], $message_id);
                $template = new Template("message_25", [
                    new TemplateData(":pay", "/daos_reqveziti"),
                    new TemplateData(":preCommand", $preCommand),
                ]);
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/daos_reqveziti":
                $this->DelMessageText($user["chat_id"], $message_id);
                $preCommand = "/message_25";
                $template = new Template("daos_reqveziti", [
                    new TemplateData(":preCommand", $preCommand),
                ]);
                $template = $template->Load();
                $template->LoadButtons();

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case"/message_25_2":
                $preCommand = "/daos_reqveziti";

                $this->DelMessageText($user["chat_id"], $message_id);

                $template = new Template("message_25_2");
                $template = $template->Load();
                $template->LoadButtons();

                $response = $this->sendMessage($user["chat_id"], $template->text, $template->buttons);

                $user["action"] = "message_25_2 {$response["result"]["message_id"]}";
                R::store($user);

                $daossmagick = R::dispense("daossmagick");
                $daossmagick["user_id"] = $user["id"];

                R::store($daossmagick);
                return;

            case "/message_26": //–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                $this->DelMessageText($user["chat_id"], $message_id);

                $whatsup_number = file_get_contents("modules/templates/admin/whats_up_number.txt");
                $watsup_msg = "https://api.whatsapp.com/send?phone=$whatsup_number&text=" . $this->loadTemplate("message_15");

                $template = new Template("message_26", [
                    new TemplateData(":whatsup", $watsup_msg)
                ]);
                $template->Load();
                $template->LoadButtons();

//                $content = $this->loadTemplate("message_26");
//                $buttons = [
//                    [
//                        $this->buildInlineKeyBoardButton("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ 1491—Ä.", "", "https://api.whatsapp.com/send?phone=79627813466&text=" . $this->loadTemplate("message_15")),
//
//                    ],
//                    [
//                        $this->buildInlineKeyBoardButton("–ù–∞–∑–∞–¥", "/start"),
//                    ],
//                ];

                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
            case "/help":
                $this->DelMessageText($user["chat_id"], $message_id);
                $template = new Template("help");
                $template = $template->Load();
                $template->LoadButtons();
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;

            case "–ü—Ä–∞–∫—Ç–∏–∫–∞":
            case "–ø—Ä–∞–∫—Ç–∏–∫–∞": // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                $this->DelMessageText($user["chat_id"], $message_id);
                $template = new Template("get_practice");
                $template = $template->Load();
                $template->LoadButtons();
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;

            case "/subscribe_check": // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            case "–ü–æ–¥–ø–∏—Å–∞–ª–∞—Å—å":
            case "–ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å":
                $this->DelMessageText($user["chat_id"], $message_id);
                $chat_id = $configs['channel']['channel_id'];
                $result = $this->getChatMember($chat_id, $user['chat_id']);

                $this->DelMessageText($user["chat_id"], $message_id);
                if (!in_array($result['result']['status'], ['kicked', 'left'])) {
                    $template = new Template("present_2");
                } else {
                    $template = new Template("practice_not_subscribed");
                }
                $template = $template->Load();
                $template->LoadButtons();
                $this->sendMessage($user["chat_id"], $template->text, $template->buttons);
                return;
        }

        return;
    }
}

